  1 + 5       1 + 5       age = 20       age = 20
  ↑   ↑         ↑          ↑    ↑            ↑
オペランド     演算子      オペランド        演算子


リルテルの種類                  |   表記例  |  型                     エスケープシーケンス
-----------------------------------------------------         表記    |   意味
小数点が無い数字                |  30       | int             ------------------------
小数点が無い数字で末尾がLまたはl |  300000L  | long          '   ¥" '   |  二重引用府記号
小数点付きの数字                |  30.5     | double        "   ¥'  "  |  引用符記号"(')"
小数点付きの数字で末尾がLまたはl |  30.5F    | float            ¥¥      |  円記号(¥)
trueまたはfalse                |  true     | boolean          ¥n      |  改行(制御文字)
単一引用符で囲まれた文字         |  '雅'     | char
二重引用符で囲まれた文字列       |  "JAVA"   | String


テキストブロック："""~"""の記述をすることで
二回目の System.out.printlnを書くことなく改行時に¥nが自動的に適用する


評価の結果
原則➀・・・・評価への置換の原則
演算子は周囲のオペランドの情報を使って計算を行い、
それらオペランドを巻き込んで結果に化ける（置き換わる）

原則➁・・・・優先順位の原則
式に演算子がある場合は、Javaで定められた優先順位の高い演算子から順に評価される

原則➂・・・・結合規則の原則
式の中に同じ優先順位グループに属する演算子が複数ある場合、
演算子ごとに含まれた「方向」から順に評価される


算術演算子                 文字列結合演算子
演算子   機能   優先順位    演算子   機能          優先順位
-----------------------   ------------------------------
  +      加算   中（5）      +      文字の連結    中（5）
  -      減算   中（5）     代入演算子
  *      乗算   高（4）     演算子   機能             優先順位
  /      除算   高（4）     ----------------------------------
  %      剰余   高（4）       =     右辺を左辺に代入   最低（15）


複合代入演算子                                         インクリメント/デクリメント演算子
演算子              機能                 優先順位       演算子    機能       優先順位
---------------------------------------------------   ----------------------------
 +=     右辺と左辺を加算して左辺に代入       最低（15）    ++      値を1増やす  最高（1）
 -=     右辺と左辺を減算して左辺に代入       最低（15）    --      値を1減らす  最高（1）
 *=     右辺と左辺を乗算して左辺に代入       最低（15）
 /=     右辺と左辺を除算して左辺に代入       最低（15）
 %=     右辺と左辺を除算して余りを左辺に代入 最低（15）
 +=     左辺の後に右辺を連結して代入         最低（15）

インクリメント/デクリメント演算子は他の演算子と一緒に使わない
オペランドの前後で適応されるタイミングが違うためバグの原因になるため


代入時の自動型変換
小さい型の値を大きい型にの変数に代入する場合に限り自動的に型を変換してから代入される
例：intからlong〇 longからint✖

強制的な型変換
キャスト変数を使うことによって一部のデータを失うが大きい型から小さい型に代入できる

演算時の自動型変換
異なる演算子同士での計算の場合自動的に大きい型に統一されて計算する


命令実行の文
-------------------------------------------------------------------------------------------------------
System.out.print(➀); ----------------------------------------- 改行せずに画面に文字を表示する
int m = Math.max(➀,➁); -------------------------------------- 二つの値を比較して大きいほうの数値を代入する
int n = Integer.parseInt(➀); --------------------------------- 文字列を整数に変換する
int r = new java.util.Random().nextInt(➀); ------------------- 乱数を発生させる
String s = new java.util.Scanner(System.in).nextLine(); ------- キーボードから１行の文字列の入力を受け付ける
int input = new java.util.Scanner(System.in).nextInt(); ------- キーボードから１つの整数の入力を受け付ける
